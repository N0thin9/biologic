#!/home/randolph/miniconda3/bin/python

# -*- coding: utf-8 -*- 

'''
Author: Yujia Liu rainl199922@gmail.com
Xi'an Jiaotong University, Biomedical Informatics & Genomics Center
2020.03.30

main.py is the entrance script. It handles the command line parameters, and returns the best model as well as its parameter(s).
'''

from lib.ioUtils import readConfig
from lib.model import selectModel
import sys, getopt

helpInfo = '''
BioLogic, a command line tool to infer the optimal model and parameters for a biological node, given empirical data

Usage: biologic [options] ... [-c configFile ] [arguments] ...
-c configFile   : provide a file of necessary information.
-h              : show this message
-q              : quiet mode
'''

def main():
    # parse the arguments
    opts, args = getopt.getopt(sys.argv[1:], "-h-c:-q", ["help", "config=", "quiet"])
    configPath, quiet = "", False
    for optKey, optVal in opts:
        if optKey in ("-h", "--help"):
            print(helpInfo)
            exit()
        elif optKey in ("-c", "--config"):
            configPath = optVal
        elif optKey in ("-q", "--quiet"):
            quiet = True
    if configPath == "":
        print(helpInfo)
        exit()
    else:
        config = readConfig(configPath)
        bestModel = selectModel(config, quiet=quiet)
        print('Choice:\n%s'%bestModel[0])
        print('Type =', bestModel[1][0].name)
        print('Specs = ' + ', '.join([spec.name for spec in bestModel[1][1]]))
        print('Parameters:\n' + ', '.join([key + ' = ' + str(val) for key, val in bestModel[2].items()]))
        print('IC = %f'%bestModel[3])

# command line entrance
if __name__ == "__main__":
    main()
